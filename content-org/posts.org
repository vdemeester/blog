#+hugo_base_dir: ../
#+hugo_section: posts
#+seq_todo: TODO DRAFT NONE

#+options: creator:t

* Blog Ideas
** TODO Notary series

* Series
** Golang testing                             :@developement:testing:golang:
*** Golang testing â€” gotest.tools introduction
:PROPERTIES:
:EXPORT_FILE_NAME: 2018-07-28-gotest-tools-intro
:EXPORT_DATE: 2018-07-28
:END:

I already wrote 2 previous posts about golang and testing. It's something I care deeply about and I wanted to continue
writing about it. It took me a bit more time than I thought, but getting back to it. Since the [[http://vincent.demeester.fr/posts/2017-04-22-golang-testing-golden-file/][last post]], Daniel Nephin
and I worked (but mainly Daniel ðŸ¤—) on bootstrapping a testing helper library.

Let me introduce it to you this library : [[https://gotest.tools][=gotest.tools=]]. As described in the [[https://godoc.org/gotest.tools][godoc]] package comment, =gotest.tools= is a
collection of packages to augment =testing= and support common patterns. It's an enhanced and growing version of the
initial helpers we (the docker/moby maintainers) wrote initially in [[https://github.com/docker/docker][=docker/docker=]] repository. We are using in quite some
project here at [[https://github.com][Docker]].

There is a bunch of packages that will all have their own post (linked here when available) :

- =assert= (with =assert/cmp= and =assert/opt=) that provides assertions for comparing expected values to actual values.
- =env= that provides functions to test code that read environment variable or the current working directory.
- =fs= that provides tools for creating temporary files, and testing the contents and structure of a directory.
- =golden= that provides tools for comparing large multi-line strings.
- =icmd= that executes binaries and provides convenient assertions for testing the results.
- =poll= that provides tools for testing asynchronous code.
- =skip= that provides functions for skipping a test and printing the source code of the condition used to skip the test.

There is also experimental package, using the =x= notation (as the golang team uses, for example with =golang.org/x/sync=) :

- =x/subtest= that provides a =TestContext= to subtests which handles cleanup and provides a =testing.TB= and =context.Context=.

There is already some good =testing= helpers in the Go ecosystem : [[https://github.com/stretchr/testify][=testify=]], [[http://labix.org/gocheck][=gocheck=]], [[https://github.com/onsi/ginkgo][=ginkgo=]] and a lot more â€” so
why create a new one ? There is multiple reason for it, most of them can be seen in the following [[https://github.com/gotestyourself/gotest.tools/issues/49#issuecomment-362436026][GitHub issue]].

[[https://github.com/dnephin/][Daniel]] also wrote a very useful converter if your code base is currently using =testify= : =gty-migrate-from-testify=.

#+BEGIN_SRC sh
$ go get -u gotest.tools/assert/cmd/gty-migrate-from-testify
# [â€¦]
$ go list \
     -f '{{.ImportPath}} {{if .XTestGoFiles}}{{"\n"}}{{.ImportPath}}_test{{end}}' \
     ./... | xargs gty-migrate-from-testify
#+END_SRC

In the next post, let's dig into the assertion part of the library, package =assert= ðŸ‘¼.

*** TODO gotest.tools assertion
*** TODO gotest.tools fs
*** TODO gotest.tools golden
*** TODO gotest.tools icmd
*** TODO gotest.tools skip
*** TODO gotest.tools x/subtest
*** TODO gotestsum
https://github.com/gotestyourself/gotestsum
*** TODO gauge for readme-test-driven
*** TODO continuous testing with filewatcher, goconvey, â€¦
** Emacs                                                     :editor:@emacs:
*** TODO Window pop-up                                      :buffer:window:
** Nixops
*** TODO Baby steps with aws
*** TODO aws "on-demand"
* Posts
** TODO nixos, binfmt_misc and containers
*** References
- https://www.kernel.org/doc/html/v4.14/admin-guide/binfmt-misc.html
- https://github.com/genuinetools/binctr
- https://blog.jessfraz.com/post/nerd-sniped-by-binfmt_misc/
** TODO wincent/clipper
** TODO nixos, runc, systemctl --user
Run rootless containers with runc and services with systemctl
** TODO Quick and dirty linux/distribution isolation

*** References
- https://unix.stackexchange.com/questions/10743/what-to-do-to-run-gui-java-app-in-chrooted-environment
- https://ebzzry.io/en/zsh-tips-3/
- https://ebzzry.io/en/kvm/
- http://wiki.ros.org/docker/Tutorials/GUI
